// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Telamingo.Infrastructure;

#nullable disable

namespace Telamingo.Infrastructure.Migrations
{
    [DbContext(typeof(TelamingoDbContext))]
    [Migration("20220514124343_UserAnswer")]
    partial class UserAnswer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.AdminAggregate.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Admin", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.AdminAggregate.AdminRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.ToTable("AdminRole", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Country", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalClimateInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClimateId")
                        .HasColumnType("int")
                        .HasColumnName("ClimateId");

                    b.Property<int>("CulturalInformationId")
                        .HasColumnType("int")
                        .HasColumnName("CulturalInformationId");

                    b.Property<double>("Rate")
                        .HasColumnType("double")
                        .HasColumnName("Rate");

                    b.HasKey("Id");

                    b.HasIndex("ClimateId");

                    b.HasIndex("CulturalInformationId");

                    b.ToTable("CulturalClimateInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CulturalInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalweatherInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CulturalInformationId")
                        .HasColumnType("int")
                        .HasColumnName("CulturalInformationId");

                    b.Property<double>("Rate")
                        .HasColumnType("double")
                        .HasColumnName("Rate");

                    b.Property<int>("WeatherId")
                        .HasColumnType("int")
                        .HasColumnName("WeatherId");

                    b.HasKey("Id");

                    b.HasIndex("CulturalInformationId");

                    b.HasIndex("WeatherId");

                    b.ToTable("CulturalweatherInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("EducationalInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalInformationTuition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EducationalInformationId")
                        .HasColumnType("int")
                        .HasColumnName("EducationalInformationId");

                    b.Property<int>("FildOfStudyId")
                        .HasColumnType("int")
                        .HasColumnName("FildOfStudyId");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.HasIndex("EducationalInformationId");

                    b.HasIndex("FildOfStudyId");

                    b.ToTable("EducationalInformationTuition", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalProbabilityOfAcceptance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EducationalInformationId")
                        .HasColumnType("int")
                        .HasColumnName("EducationalInformationId");

                    b.Property<int>("FildOfStudyId")
                        .HasColumnType("int")
                        .HasColumnName("FildOfStudyId");

                    b.Property<double>("Rate")
                        .HasColumnType("double")
                        .HasColumnName("Rate");

                    b.HasKey("Id");

                    b.HasIndex("EducationalInformationId");

                    b.HasIndex("FildOfStudyId");

                    b.ToTable("EducationalProbabilityOfAcceptance", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EnvironmentalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<int>("Immigration")
                        .HasColumnType("int")
                        .HasColumnName("Immigration");

                    b.Property<int>("ReligiousIssues")
                        .HasColumnType("int")
                        .HasColumnName("ReligiousIssues");

                    b.Property<int>("SocialRelationshipMatching")
                        .HasColumnType("int")
                        .HasColumnName("SocialRelationshipMatching");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("EnvironmentalInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EnvironmentalLanguageInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EnvironmentalInformationId")
                        .HasColumnType("int")
                        .HasColumnName("EnvironmentalInformationId");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageId");

                    b.Property<double>("Rate")
                        .HasColumnType("double")
                        .HasColumnName("Rate");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentalInformationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("EnvironmentalLanguageInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.LanguageInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<double>("LanguageEpidemicRates")
                        .HasColumnType("double")
                        .HasColumnName("LanguageEpidemicRates");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("LanguageName");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("LanguageInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.MentalHealthInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AbilityToVisitFamily")
                        .HasColumnType("double")
                        .HasColumnName("AbilityToVisitFamily");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("MentalHealthInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.MentalHealthPossibilityOfExacerbationOfTheDisorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DisorderId")
                        .HasColumnType("int")
                        .HasColumnName("DisorderId");

                    b.Property<int>("MentalHealthInformationId")
                        .HasColumnType("int")
                        .HasColumnName("MentalHealthInformationId");

                    b.Property<double>("Possibility")
                        .HasColumnType("double")
                        .HasColumnName("Possibility");

                    b.HasKey("Id");

                    b.HasIndex("DisorderId");

                    b.HasIndex("MentalHealthInformationId");

                    b.ToTable("MentalHealthPossibilityOfExacerbationOfTheDisorder", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.PhysicalHealthDesiredFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("FoodId");

                    b.Property<int>("PhysicalHealthInformationId")
                        .HasColumnType("int")
                        .HasColumnName("PhysicalHealthInformationId");

                    b.Property<double>("Rate")
                        .HasColumnType("double")
                        .HasColumnName("Rate");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("PhysicalHealthInformationId");

                    b.ToTable("PhysicalHealthDesiredFood", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.PhysicalHealthInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AveragePerCapitaHealthExpenditure")
                        .HasColumnType("double")
                        .HasColumnName("AveragePerCapitaHealthExpenditure");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<int>("DoctorAccess")
                        .HasColumnType("double")
                        .HasColumnName("DoctorAccess");

                    b.Property<double>("StatusOfTheTreatmentSystemForSpecificDiseases")
                        .HasColumnType("double")
                        .HasColumnName("StatusOfTheTreatmentSystemForSpecificDiseases");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("PhysicalHealthInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.WelfareInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AnnualSavingsRates")
                        .HasColumnType("double")
                        .HasColumnName("AnnualSavingsRates");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("JobId");

                    b.Property<double>("RequiredSpecialization")
                        .HasColumnType("double")
                        .HasColumnName("RequiredSpecialization");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("JobId");

                    b.ToTable("WelfareInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.QuestionAggregate.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionId");

                    b.Property<string>("TextEn")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("TextEn");

                    b.Property<string>("TextFa")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("TextFa");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.QuestionAggregate.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnswerType")
                        .HasColumnType("int")
                        .HasColumnName("AnswerType");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<string>("ContextEn")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("ContextEn");

                    b.Property<string>("ContextFa")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("ContextFa");

                    b.Property<bool>("MultiSelect")
                        .HasColumnType("bit")
                        .HasColumnName("MultiSelect");

                    b.HasKey("Id");

                    b.ToTable("Question", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Climate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Climate", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Disorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Disorder", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.FildOfStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("FildOfStudy", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Food", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Job", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Language", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Weather", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Companions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Age");

                    b.Property<string>("First_Lang")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("First_Lang");

                    b.Property<string>("Gender")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Gender");

                    b.Property<int>("PrimaryId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryId");

                    b.Property<string>("Relationship")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Relationship");

                    b.Property<string>("Second_Lang")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Second_Lang");

                    b.Property<string>("Third_Lang")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Third_Lang");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryId");

                    b.ToTable("Companions", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Cultural", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IfYesHowMuch")
                        .HasColumnType("int")
                        .HasColumnName("IfYesHowMuch");

                    b.Property<int>("ImmigrantCommunity")
                        .HasColumnType("int")
                        .HasColumnName("ImmigrantCommunity");

                    b.Property<bool>("NationalMatters")
                        .HasColumnType("bit")
                        .HasColumnName("NationalMatters");

                    b.Property<int>("ReligiousMatters")
                        .HasColumnType("int")
                        .HasColumnName("ReligiousMatters");

                    b.Property<int>("Similarity")
                        .HasColumnType("int")
                        .HasColumnName("Similarity");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerId");

                    b.Property<int?>("UserAnswerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAnswerId");

                    b.HasIndex("UserAnswerId1")
                        .IsUnique()
                        .HasFilter("[UserAnswerId1] IS NOT NULL");

                    b.ToTable("Cultural", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Economy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrentJob")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("CurrentJob");

                    b.Property<string>("CurrentSaving")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("CurrentSaving");

                    b.Property<string>("PreferredJob")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PreferredJob");

                    b.Property<string>("PreferredSaving")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PreferredSaving");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerId");

                    b.Property<int?>("UserAnswerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAnswerId");

                    b.HasIndex("UserAnswerId1")
                        .IsUnique()
                        .HasFilter("[UserAnswerId1] IS NOT NULL");

                    b.ToTable("Economy", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Environmental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cloudy")
                        .HasColumnType("int")
                        .HasColumnName("Cloudy");

                    b.Property<int>("Moderate")
                        .HasColumnType("int")
                        .HasColumnName("Moderate");

                    b.Property<int>("Snowy")
                        .HasColumnType("int")
                        .HasColumnName("Snowy");

                    b.Property<bool>("SpecialWeather")
                        .HasColumnType("bit")
                        .HasColumnName("SpecialWeather");

                    b.Property<int>("Sunny")
                        .HasColumnType("int")
                        .HasColumnName("Sunny ");

                    b.Property<int>("UnusualDaytime")
                        .HasColumnType("int")
                        .HasColumnName("UnusualDaytime");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerId");

                    b.Property<int?>("UserAnswerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAnswerId");

                    b.HasIndex("UserAnswerId1")
                        .IsUnique()
                        .HasFilter("[UserAnswerId1] IS NOT NULL");

                    b.ToTable("Environmental", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Mental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FamilyVisit")
                        .HasColumnType("int")
                        .HasColumnName("FamilyVisit");

                    b.Property<string>("First")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("First");

                    b.Property<bool>("MentalIll")
                        .HasColumnType("bit")
                        .HasColumnName("MentalIll");

                    b.Property<string>("Secend")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Secend");

                    b.Property<string>("Third")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Third");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerId");

                    b.Property<int?>("UserAnswerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAnswerId");

                    b.HasIndex("UserAnswerId1")
                        .IsUnique()
                        .HasFilter("[UserAnswerId1] IS NOT NULL");

                    b.ToTable("Mental", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.MostImportants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstProblem")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("FirstProblem");

                    b.Property<string>("SecendProblem")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("SecendProblem");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerId");

                    b.Property<int?>("UserAnswerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAnswerId");

                    b.HasIndex("UserAnswerId1")
                        .IsUnique()
                        .HasFilter("[UserAnswerId1] IS NOT NULL");

                    b.ToTable("MostImportants", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Physical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FastFood")
                        .HasColumnType("int")
                        .HasColumnName("FastFood");

                    b.Property<string>("First")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("First");

                    b.Property<string>("MedicineCost")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("MedicineCost");

                    b.Property<string>("MedicineNeed")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("MedicineNeed");

                    b.Property<string>("Secend")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Secend");

                    b.Property<int>("SpecialFood")
                        .HasColumnType("int")
                        .HasColumnName("SpecialFood");

                    b.Property<bool>("SpecialIll")
                        .HasColumnType("bit")
                        .HasColumnName("SpecialIll");

                    b.Property<string>("Third")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Third");

                    b.Property<int>("TraditionalFood")
                        .HasColumnType("int")
                        .HasColumnName("TraditionalFood");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerId");

                    b.Property<int?>("UserAnswerId1")
                        .HasColumnType("int");

                    b.Property<int>("Vegeterian")
                        .HasColumnType("int")
                        .HasColumnName("Vegeterian");

                    b.HasKey("Id");

                    b.HasIndex("UserAnswerId");

                    b.HasIndex("UserAnswerId1")
                        .IsUnique()
                        .HasFilter("[UserAnswerId1] IS NOT NULL");

                    b.ToTable("Physical", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Primary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Age");

                    b.Property<string>("First_Lang")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("First_Lang");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<bool>("Marriage")
                        .HasColumnType("bit")
                        .HasColumnName("Marriage");

                    b.Property<int>("NumberOfCompanions")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfCompanions");

                    b.Property<string>("Preferred_Visa_Type")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Preferred_Visa_Type");

                    b.Property<string>("Second_Lang")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Second_Lang");

                    b.Property<int>("Second_LangLevel")
                        .HasColumnType("int")
                        .HasColumnName("Second_LangLevel");

                    b.Property<string>("Sex")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Sex");

                    b.Property<string>("Third_Lang")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Third_Lang");

                    b.Property<int>("Third_LangLevel")
                        .HasColumnType("int")
                        .HasColumnName("Third_LangLevel");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerId");

                    b.Property<int?>("UserAnswerId1")
                        .HasColumnType("int");

                    b.Property<string>("User_Destination")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("User_Destination");

                    b.HasKey("Id");

                    b.HasIndex("UserAnswerId");

                    b.HasIndex("UserAnswerId1")
                        .IsUnique()
                        .HasFilter("[UserAnswerId1] IS NOT NULL");

                    b.ToTable("Primary", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("UserAnwer", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.UserInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("UserAnswerId");

                    b.Property<int?>("UserAnswerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAnswerId");

                    b.HasIndex("UserAnswerId1")
                        .IsUnique()
                        .HasFilter("[UserAnswerId1] IS NOT NULL");

                    b.ToTable("UserInformation", "dbo");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.AdminAggregate.Admin", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.AdminAggregate.AdminRole", "AdminRole")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminRole");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalClimateInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.SharedAggregate.Climate", "Climate")
                        .WithMany("culturalClimateInformation")
                        .HasForeignKey("ClimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalInformation", "CulturalInformation")
                        .WithMany("culturalClimateInformation")
                        .HasForeignKey("CulturalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Climate");

                    b.Navigation("CulturalInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.Country", "Country")
                        .WithMany("culturalInformation")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalweatherInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalInformation", "CulturalInformation")
                        .WithMany("culturalweatherInformation")
                        .HasForeignKey("CulturalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.SharedAggregate.Weather", "Weather")
                        .WithMany("culturalweatherInformation")
                        .HasForeignKey("WeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CulturalInformation");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.Country", "Country")
                        .WithMany("educationalInformation")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalInformationTuition", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalInformation", "EducationalInformation")
                        .WithMany("educationalInformationTuitions")
                        .HasForeignKey("EducationalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.SharedAggregate.FildOfStudy", "FildOfStudy")
                        .WithMany("educationalInformationTuitions")
                        .HasForeignKey("FildOfStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalInformation");

                    b.Navigation("FildOfStudy");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalProbabilityOfAcceptance", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalInformation", "EducationalInformation")
                        .WithMany("educationalProbabilityOfAcceptances")
                        .HasForeignKey("EducationalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.SharedAggregate.FildOfStudy", "FildOfStudy")
                        .WithMany("educationalProbabilityOfAcceptances")
                        .HasForeignKey("FildOfStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalInformation");

                    b.Navigation("FildOfStudy");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EnvironmentalInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.Country", "Country")
                        .WithMany("environmentalInformation")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EnvironmentalLanguageInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.EnvironmentalInformation", "EnvironmentalInformation")
                        .WithMany("environmentalLanguageInformation")
                        .HasForeignKey("EnvironmentalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.SharedAggregate.Language", "Language")
                        .WithMany("environmentalLanguageInformation")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnvironmentalInformation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.LanguageInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.Country", "Country")
                        .WithMany("languageInformation")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.MentalHealthInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.Country", "Country")
                        .WithMany("mentalHealthInformation")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.MentalHealthPossibilityOfExacerbationOfTheDisorder", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.SharedAggregate.Disorder", "Disorder")
                        .WithMany("mentalHealthPossibilityOfExacerbationOfTheDisorders")
                        .HasForeignKey("DisorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.MentalHealthInformation", "MentalHealthInformation")
                        .WithMany("mentalHealthPossibilityOfExacerbationOfTheDisorders")
                        .HasForeignKey("MentalHealthInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disorder");

                    b.Navigation("MentalHealthInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.PhysicalHealthDesiredFood", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.SharedAggregate.Food", "Food")
                        .WithMany("physicalHealthDesiredFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.PhysicalHealthInformation", "PhysicalHealthInformation")
                        .WithMany("physicalHealthDesiredFoods")
                        .HasForeignKey("PhysicalHealthInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("PhysicalHealthInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.PhysicalHealthInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.Country", "Country")
                        .WithMany("PhysicalHealthInformation")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.WelfareInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.CountryAggregate.Country", "Country")
                        .WithMany("welfareInformation")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.SharedAggregate.Job", "Job")
                        .WithMany("welfareInformation")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.QuestionAggregate.Answer", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.QuestionAggregate.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Companions", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.Primary", "Primary")
                        .WithMany("Companions")
                        .HasForeignKey("PrimaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Primary");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Cultural", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", "UserAnswer")
                        .WithMany("Culturals")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", null)
                        .WithOne("Cultural")
                        .HasForeignKey("Telamingo.Domain.AggregateModels.UserAggregate.Cultural", "UserAnswerId1");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Economy", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", "UserAnswer")
                        .WithMany("Economys")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", null)
                        .WithOne("Economy")
                        .HasForeignKey("Telamingo.Domain.AggregateModels.UserAggregate.Economy", "UserAnswerId1");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Environmental", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", "UserAnswer")
                        .WithMany("Environmentals")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", null)
                        .WithOne("Environmental")
                        .HasForeignKey("Telamingo.Domain.AggregateModels.UserAggregate.Environmental", "UserAnswerId1");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Mental", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", "UserAnswer")
                        .WithMany("Mentals")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", null)
                        .WithOne("Mental")
                        .HasForeignKey("Telamingo.Domain.AggregateModels.UserAggregate.Mental", "UserAnswerId1");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.MostImportants", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", "UserAnswer")
                        .WithMany("MostImportantss")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", null)
                        .WithOne("MostImportants")
                        .HasForeignKey("Telamingo.Domain.AggregateModels.UserAggregate.MostImportants", "UserAnswerId1");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Physical", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", "UserAnswer")
                        .WithMany("Physicals")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", null)
                        .WithOne("Physical")
                        .HasForeignKey("Telamingo.Domain.AggregateModels.UserAggregate.Physical", "UserAnswerId1");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Primary", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", "UserAnswer")
                        .WithMany("Primarys")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", null)
                        .WithOne("Primary")
                        .HasForeignKey("Telamingo.Domain.AggregateModels.UserAggregate.Primary", "UserAnswerId1");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.UserInformation", b =>
                {
                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", "UserAnswer")
                        .WithMany("UserInformations")
                        .HasForeignKey("UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", null)
                        .WithOne("UserInformation")
                        .HasForeignKey("Telamingo.Domain.AggregateModels.UserAggregate.UserInformation", "UserAnswerId1");

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.AdminAggregate.AdminRole", b =>
                {
                    b.Navigation("Admins");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.Country", b =>
                {
                    b.Navigation("PhysicalHealthInformation");

                    b.Navigation("culturalInformation");

                    b.Navigation("educationalInformation");

                    b.Navigation("environmentalInformation");

                    b.Navigation("languageInformation");

                    b.Navigation("mentalHealthInformation");

                    b.Navigation("welfareInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.CulturalInformation", b =>
                {
                    b.Navigation("culturalClimateInformation");

                    b.Navigation("culturalweatherInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EducationalInformation", b =>
                {
                    b.Navigation("educationalInformationTuitions");

                    b.Navigation("educationalProbabilityOfAcceptances");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.EnvironmentalInformation", b =>
                {
                    b.Navigation("environmentalLanguageInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.MentalHealthInformation", b =>
                {
                    b.Navigation("mentalHealthPossibilityOfExacerbationOfTheDisorders");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.CountryAggregate.PhysicalHealthInformation", b =>
                {
                    b.Navigation("physicalHealthDesiredFoods");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.QuestionAggregate.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Climate", b =>
                {
                    b.Navigation("culturalClimateInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Disorder", b =>
                {
                    b.Navigation("mentalHealthPossibilityOfExacerbationOfTheDisorders");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.FildOfStudy", b =>
                {
                    b.Navigation("educationalInformationTuitions");

                    b.Navigation("educationalProbabilityOfAcceptances");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Food", b =>
                {
                    b.Navigation("physicalHealthDesiredFoods");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Job", b =>
                {
                    b.Navigation("welfareInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Language", b =>
                {
                    b.Navigation("environmentalLanguageInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.SharedAggregate.Weather", b =>
                {
                    b.Navigation("culturalweatherInformation");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.Primary", b =>
                {
                    b.Navigation("Companions");
                });

            modelBuilder.Entity("Telamingo.Domain.AggregateModels.UserAggregate.UserAnswer", b =>
                {
                    b.Navigation("Cultural")
                        .IsRequired();

                    b.Navigation("Culturals");

                    b.Navigation("Economy")
                        .IsRequired();

                    b.Navigation("Economys");

                    b.Navigation("Environmental")
                        .IsRequired();

                    b.Navigation("Environmentals");

                    b.Navigation("Mental")
                        .IsRequired();

                    b.Navigation("Mentals");

                    b.Navigation("MostImportants")
                        .IsRequired();

                    b.Navigation("MostImportantss");

                    b.Navigation("Physical")
                        .IsRequired();

                    b.Navigation("Physicals");

                    b.Navigation("Primary")
                        .IsRequired();

                    b.Navigation("Primarys");

                    b.Navigation("UserInformation")
                        .IsRequired();

                    b.Navigation("UserInformations");
                });
#pragma warning restore 612, 618
        }
    }
}
